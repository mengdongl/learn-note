以下是从浏览器工作原理流程出发所进行的分析：

一、加载过程：
1、对资源进行缓存。
2、对资源（html、js、css）进行压缩，一般是由webpack在生产构建模式下自动完成。
3、treeshaking,  从webpack4开始,webpack生产构建模式下会自动使用terser-plugin插件对js代码进行treeshaking,减少js代码中未被使用的模块代码。
4、代码拆分。使用splitChunks插件对业务代码和第三方库进行代码拆分，vue-cli默认配置。动态加载：vueRouter使用() => import(...)实现路由级的代码拆分，从而实现js代码的动态加载。
5、使用Gzip对传输资源进行压缩。
6、升级为http2协议，二进制传输、多路复用、服务器推送。（主要用于请求量多，用户网络环境不稳定的网站）
7、前端预渲染、服务端渲染技术。


二、渲染过程
关键渲染路径：javascript操作 ---》 style被修改 ---》 layout（布局/回流） ---》paint（绘制/重绘）---》 composite（复合）
主要是从减少回流和重绘的方面进行分析。

会导致回流的操作：
1、新增或删除元素。
2、修改元素的几何大小。
3、修改元素的位置。（offsetLeft、scrollTop、clientWidth）
4、修改浏览器大小、字体大小。
5、display:none。

transform、opacity只会触发复合，不会触发回流和重绘。 使用will-change可以将元素放到一个新图层。

三、其他方法
1、图片懒加载（用于图片量较大的网页）
2、高频事件处理函数节流防抖
3、虚拟列表
4、骨架屏占位
5、优化资源加载顺序（preload、prefetch）。
preload：提前加载稍晚出现但当前页面需要用到的资源。
prefetch：在当前页面有空闲的情况下加载其他页面可能会用到的资源，优先级较低。


